{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","React","Component","render","animation","this","props","className","Animation","type","stretch","style","borderRadius","StickerSet","shouldComponentUpdate","nextProps","nextState","nextContext","info","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","StickersPickerHeader","constructor","super","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","componentDidMount","StickerStore","on","componentWillUnmount","off","componentDidUpdate","prevProps","prevState","snapshot","recent","recentItem","play","PICKER_HEADER","openMedia","ref","classNames","onWheel","enhance","compose","withSaveRef","withTranslation","withRestoreRef","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","startPosition","element","diff","pos","clientUpdate","handleScroll","scrolling","now","Date","lastScrollTime","scrollTimer","clearTimeout","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","mapEquals","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","margin","withTheme","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","theme","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","Button"],"mappings":"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","file":"static/js/7.1d15a0a7.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation from '../Message/Media/Animation';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    render() {\n        const { animation } = this.props;\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    type='preview'\n                    stretch={true}\n                    animation={animation}\n                    style={{ borderRadius: 0 }}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info } = this.props;\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        // console.log('[header] setPosition', position);\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        // console.log('[header] handleSelect', stickers.indexOf(sticker));\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { recent, stickers } = this.props;\n\n        const recentItem = recent ?\n            <div\n                className='stickers-picker-header-recent'\n                onClick={() => this.handleSelect('recent')}>\n                <AccessTimeIcon/>\n            </div> :\n            null;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={36}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className={classNames('stickers-picker-header-scroll', 'scrollbars-hidden')} onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>\n                        {recentItem}\n                        {items}\n                    </div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    recent: PropTypes.object,\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    stop() {\n\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { recent, sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let startPosition = 0;\n        if (recent && recent.stickers.length > 0) {\n            startPosition = 1;\n            const element = this.itemsMap.get('recent');\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = 0;\n                        }\n                    }\n                }\n            }\n        }\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node && node.offsetTop <= scroll.scrollTop) {\n                    const offsetTop = node.offsetTop;\n                    if (node) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = startPosition + pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        this.scrolling = true;\n        const now = new Date();\n        this.lastScrollTime = now;\n        if (this.scrollTimer) clearTimeout(this.scrollTimer);\n        this.scrollTimer = setTimeout(() => {\n            if (now !== this.lastScrollTime) return;\n\n            this.scrolling = false;\n        }, 250);\n\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position === -1) {\n            const scroll = scrollRef.current;\n            scroll.scrollTop = 0;\n        } else if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker' style={style}>\n                <StickersPickerHeader\n                    recent={recentInfo}\n                    stickers={headerStickers}\n                    onSelect={this.handleSelectSet} />\n                <div ref={this.scrollRef} className={classNames('stickers-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            ref={el => this.itemsMap.set('recent', el)}\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { mapEquals, debounce, throttle } from '../../Utils/Common';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n\n            this.forceUpdate(() => {\n                this.start();\n            });\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return;\n\n        const { animations } = savedAnimations;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (mapEquals(animationsInView, inViewMap)) {\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        // console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const { savedAnimations } = AnimationStore;\n\n                    const sticker = savedAnimations.animations[stickerId];\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        // this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        // this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { savedAnimations } = AnimationStore;\n\n        const sticker = savedAnimations.animations[stickerId];\n        onPreview(sticker);\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    openAnimation = animation => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(animation);\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            <div\n                data-animation-index={index}\n                key={`${index}_${x.animation.id}`}\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                >\n                <Animation\n                    type='picker'\n                    animation={x}\n                    openMedia={() => this.openAnimation(x)}\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='gifs-picker' style={style}>\n                <div ref={this.scrollRef} className={classNames('gifs-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        const { open } = this.state;\n\n        if (open) {\n            this.removePicker = true;\n        } else {\n            this.picker = null;\n        }\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n\n            if (this.state.tab === 2) {\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.start();\n                }\n            }\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        // return;\n\n        const { animation, sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open }, () => {\n            if (!this.state.open) {\n                if (this.removePicker) {\n                    this.picker = null;\n                    this.removePicker = false;\n                }\n\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.stop();\n                }\n            }\n        });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        // console.log('[sp] handleStickersClick');\n\n        if (tab === 1) {\n            if (stickersPicker) {\n                stickersPicker.scrollTop();\n            }\n        } else {\n            setTimeout(() => {\n                // console.log('[sp] handleStickersClick.loadContent');\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n            }, 150);\n\n            this.setState({ tab: 1 });\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n\n        if (tab === 2) {\n            if (gifsPicker) {\n                gifsPicker.scrollTop();\n            }\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                    style={{ position: 'absolute', left: 338, top: 0 }}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                </div>\n                {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                {Boolean(animation) && <AnimationPreview animation={animation} />}\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}